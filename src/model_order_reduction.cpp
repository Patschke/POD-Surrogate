//#include <iostream>
#include <vector>
#include "model_order_reduction.hpp"

using namespace std;
using namespace arma;

// To be called with options -i inputpath, -o outputpath
int main(int argc, char** argv)
{

	// Read input args
	std::string inputpath = "";// "../POD_Surrogate/FinalDataset/Acquisition/";
	std::string outputpath = "";// "../POD_Surrogate/FinalDataset/POD/";

	int numberofpodmodes = 20;
	for (int i = 1; i < argc; i++) { // Skip first arg, as it is the program name
		std::string arg = argv[i];
		if (arg.substr(0, 2) == "-i") {
			inputpath = arg.substr(2);
			if (inputpath.back() != '/')
				inputpath += "/";
		}
		else if (arg.substr(0, 2) == "-o") {
			outputpath = arg.substr(2);
			if (outputpath.back() != '/')
				outputpath += "/";
		}
		else if (arg.substr(0, 2) == "-n") {
			numberofpodmodes = std::stoi(arg.substr(2));
		}
		else {
			cout << "Unknown option " << arg << "\n";
			cout << "Aborting.";
			return -1;
		}
	}

	// Check if input args have been set
	if (inputpath == "" or outputpath == "") {
		cout << "Usage: -isamplepath -ooutputpath [-n(Number of Modes, default 20)]\n No spaces between option and content permitted, e.g. -n20\n Aborting.";
		return -1;
	}

	// Do stuff. 
	calculatePODModes(inputpath, outputpath, numberofpodmodes);

	return 0;
}


void calculatePODModes(std::string inputpath, std::string outputpath, int modecount) {
	// snapshot generated by python script
	mat snapshot;

	cout << "Loading snapshot matrix. This may take a minute..\n";

	snapshot.load(inputpath + "snapshot_matrix.txt");

	cout << "Snapshot loaded.\n";

	cout << "Rows: " << snapshot.n_rows << " ";
	cout << "Columns: " << snapshot.n_cols << "\n";

	snapshot.save(outputpath + "snapshot_matrix.mat");

	cout << "Calculate deviation matrix...\n";
	// mean value of the snapshots
	rowvec snapshotMeanValue = mean(snapshot, 0);

	snapshotMeanValue.save(outputpath + "snapshotMeanValue.vec");

	// P = (s1-s s2-s .. sM-s), page 21 of [Iuliano 13], snapshotDeviationMatrix
	mat snapshotDeviationMatrix = snapshot.each_row() - snapshotMeanValue;

	cout << "Deviation Matrix Calculated.\n";

	cout << "Rows: " << snapshotDeviationMatrix.n_rows << " ";
	cout << "Columns: " << snapshotDeviationMatrix.n_cols << "\n";

	snapshotDeviationMatrix.save(outputpath + "Deviation.mat");

	// snapshotDeviationMatrix = U*diagmat(s)*V.t()
	mat U;
	vec s;
	mat V;

	cout << "Calculate Singular Value Decomposition. This may take a while...\n";

	svd(U, s, V, snapshotDeviationMatrix);

	U.save(outputpath + "U.mat");
	V.save(outputpath + "V.mat");
	s.save(outputpath + "s.vec");

	cout << "SVD Calculated, saving first " << modecount << " POD modes";

	mat podModes;
	podModes = V.cols(0, modecount - 1);

	podModes.save(outputpath + "podModes.mat");

	cout << "Calculating mode coefficients...\n";

	mat coefficients = snapshotDeviationMatrix * podModes;

	coefficients.save(outputpath + "PODCoefficients.txt", raw_ascii);

	cout << "Model Order Reduction Done!\n";
}